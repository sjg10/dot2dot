# Compiler definitions
CPP = g++

# Flags for opencv
CVCPPFLAGS = $(shell pkg-config --cflags opencv)
CVLDLIBS = $(shell pkg-config --libs opencv)
#Check some were found i.e. opencv is installed.
ifeq ($(strip $(CVCPPFLAGS)),)
$(error No copy of opencv found by pkg-config. Please install from opencv.org)
endif


CPPFLAGS = -c -std=c++11 -Wall $(CVCPPFLAGS) $(addprefix -D,$(DEFINES)) -I$(INCLUDE_DIR) $(MAKEFILE_DEPS_FLAGS-) -g
MAKEFILE_DEPS_FLAGS = -MMD -MP
DEFINES =
LDFLAGS = -lm $(CVLDLIBS)

# Helper programs
MKDIR_P = mkdir -p

# Directories
SOURCE_DIR = src
INCLUDE_DIR = include
OBJ_DIR = obj
BIN_DIR = bin

# Files
EXECUTABLE = $(BIN_DIR)/dot2dot
INCLUDES = $(wildcard $(INCLUDE_DIR)/*.h)
SOURCES = $(wildcard $(SOURCE_DIR)/*.cpp)
OBJECTS = $(SOURCES:$(SOURCE_DIR)/%.cpp=$(OBJ_DIR)/%.o)
DEPS = $(OBJECTS:.o=.d)

# Phony Targets
.PHONY: dirs all clean

all: dirs $(OBJECTS) $(EXECUTABLE)
	@printf "All done.\n"

clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR) $(MAGIC_HEADER)
	@printf "Cleaned.\n"

dirs: $(OBJ_DIR) $(BIN_DIR)

# Real Targets
$(EXECUTABLE): $(OBJECTS)
	@printf "Linking $(EXECUTABLE)...\n"
	$(CPP) $(LDFLAGS) $(OBJECTS) -o $(EXECUTABLE)
	@printf "Done.\n\n"

$(OBJ_DIR)/%.o: $(SOURCE_DIR)/%.cpp
	@printf "Compiling $< ...\n"
	$(CPP) $(CPPFLAGS) $< -o $@
	@printf "Done.\n\n"

$(OBJ_DIR) $(BIN_DIR):
	@printf "Creating output folder...\n"
	$(MKDIR_P) $@;
	@printf "Done.\n\n"

# Include dependency targets generated by (-MMD -MP) flags
-include $(DEPS)
